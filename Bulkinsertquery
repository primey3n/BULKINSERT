using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

namespace INSERTTODB
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("== CSV to SQL Bulk Insert ==");

            string csvPath = "data.csv"; // You can pass via args if desired
            string configPath = "config.txt";

            if (!File.Exists(csvPath) || !File.Exists(configPath))
            {
                Console.WriteLine("CSV or config file missing.");
                return;
            }

            bool trimValues = true; // Optional: control via args or prompt
            var dataTable = LoadCsvToDataTable(csvPath, configPath, trimValues);
            string tableName = GetTableNameFromConfig(configPath);

            try
            {
                BulkInsertData(dataTable, tableName);
                Console.WriteLine("Data inserted successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error inserting data: " + ex.Message);
            }
        }

        static DataTable LoadCsvToDataTable(string filePath, string configFilePath, bool trim)
        {
            DataTable dataTable = new DataTable();
            LoadColumnDefinitions(dataTable, configFilePath);

            using (StreamReader reader = new StreamReader(filePath))
            {
                string headerLine = reader.ReadLine(); // skip header
                string line;

                while ((line = reader.ReadLine()) != null)
                {
                    string[] values = ParseCsvLine(line);

                    if (values.Length != dataTable.Columns.Count)
                    {
                        Console.WriteLine("Skipping row: column count mismatch.");
                        continue;
                    }

                    DataRow row = dataTable.NewRow();
                    for (int i = 0; i < values.Length; i++)
                    {
                        string value = trim ? values[i].Trim() : values[i];
                        try
                        {
                            row[i] = string.IsNullOrWhiteSpace(value)
                                ? DBNull.Value
                                : Convert.ChangeType(value, dataTable.Columns[i].DataType);
                        }
                        catch
                        {
                            row[i] = DBNull.Value;
                        }
                    }

                    dataTable.Rows.Add(row);
                }
            }

            return dataTable;
        }

        static string[] ParseCsvLine(string line)
        {
            var pattern = @"
                (?!\s*$)                                     
                \s*                                          
                (?:                                          
                  ""(?<val>[^""]*(?:""""[^""]*)*)""           
                  |                                          
                  (?<val>[^,""]*)                            
                )
                \s*                                          
                (?:,|$)                                       ";

            var matches = Regex.Matches(line, pattern, RegexOptions.IgnorePatternWhitespace);
            return matches.Cast<Match>().Select(m => m.Groups["val"].Value.Replace("\"\"", "\"")).ToArray();
        }

        static string GetTableNameFromConfig(string configFilePath)
        {
            var configLines = File.ReadAllLines(configFilePath);
            var tableNameLine = configLines.FirstOrDefault(line => line.StartsWith("TableName"));
            if (tableNameLine != null)
            {
                var values = tableNameLine.Split(',');
                return values[1].Trim();
            }
            return "DefaultTableName"; // Default fallback value
        }

        static void LoadColumnDefinitions(DataTable dataTable, string configFilePath)
        {
            var configLines = File.ReadAllLines(configFilePath);
            foreach (var line in configLines.Skip(2)) // Skip the first two lines (header and table name)
            {
                var values = line.Split(',');
                string columnName = values[0].Trim();
                string dataType = values[1].Trim();
                Type type = Type.GetType("System." + dataType, true);
                dataTable.Columns.Add(columnName, type);
            }
        }

        static void BulkInsertData(DataTable dataTable, string tableName)
        {
            // Embed connection string directly here
            string connectionString = "Server="YourServer"; Database=YourDB; User Id=YourID; Password=YourPassword;";
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection))
                {
                    bulkCopy.DestinationTableName = tableName;

                    foreach (DataColumn column in dataTable.Columns)
                    {
                        bulkCopy.ColumnMappings.Add(column.ColumnName, column.ColumnName);
                    }

                    bulkCopy.WriteToServer(dataTable);
                }
            }
        }
    }
}
