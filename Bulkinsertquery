using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.IO;
using System.Configuration;

namespace ProjectApp
{
    public partial class SqlBulkCopy_frm : Form
    {
        public SqlBulkCopy_frm()
        {
            InitializeComponent();
        }

        private void Btn_FileOpen_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*";
                openFileDialog.Title = "Select a CSV File";

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string filePath = openFileDialog.FileName;
                    string configFilePath = "config.txt"; // Path to your config file
                    DataTable dataTable = LoadCsvToDataTable(filePath, configFilePath);

                    // Get the table name dynamically from the config file
                    string tableName = GetTableNameFromConfig(configFilePath);
                    BulkInsertData(dataTable, tableName);
                }
            }
        }


        private DataTable LoadCsvToDataTable(string filePath, string configFilePath)
        {
            DataTable dataTable = new DataTable();

            // Load column definitions from the config file
            LoadColumnDefinitions(dataTable, configFilePath);

            // Load data from the CSV file
            foreach (var line in File.ReadLines(filePath).Skip(1)) // Skip header
            {
                var values = line.Split(',');
                var row = dataTable.NewRow();

                for (int i = 0; i < values.Length; i++)
                {
                    // Trim the value and check conditions before assigning
                    Boolean Delspace = rb_DelSpaceYes.Checked;
                    string trimmedValue = values[i];

                    if (Delspace == true) { trimmedValue.Trim(); }// MessageBox.Show("1"); }
                    //string trimmedValue = values[i].Trim();
                    if (string.IsNullOrWhiteSpace(trimmedValue))
                    {
                        row[i] = DBNull.Value; // Assign DBNull for empty values
                    }
                    else
                    {
                        // Convert the trimmed value to the column's data type
                        row[i] = Convert.ChangeType(trimmedValue, dataTable.Columns[i].DataType);
                    }
                }

                dataTable.Rows.Add(row);
            }

            return dataTable;
        }


        private string GetTableNameFromConfig(string configFilePath)
        {
            var configLines = File.ReadAllLines(configFilePath);
            var tableNameLine = configLines.FirstOrDefault(line => line.StartsWith("TableName"));
            if (tableNameLine != null)
            {
                var values = tableNameLine.Split(',');
                return values[1].Trim(); // Return the table name
            }
            return "DefaultTableName"; // Fallback if not found
        }

        private void LoadColumnDefinitions(DataTable dataTable, string configFilePath)
        {
            var configLines = File.ReadAllLines(configFilePath);
            foreach (var line in configLines.Skip(2)) // Skip the first two lines (table name and column header)
            {
                var values = line.Split(',');
                string columnName = values[0].Trim();
                string dataType = values[1].Trim();
                // Ensure the data type is correctly formatted
                Type type = Type.GetType("System." + dataType, true);
                dataTable.Columns.Add(columnName, type);
            }
        }

        private void BulkInsertData(DataTable dataTable, string tableName)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["MyConString"].ConnectionString;

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(connection))
                {
                    bulkCopy.DestinationTableName = tableName; // Use the dynamic table name

                    // Create column mappings dynamically
                    foreach (DataColumn column in dataTable.Columns)
                    {
                        // Adjust this if your SQL table column names differ
                        bulkCopy.ColumnMappings.Add(column.ColumnName, column.ColumnName);
                    }

                    // Perform the bulk copy
                    bulkCopy.WriteToServer(dataTable);
                }
            }

            MessageBox.Show("Data inserted successfully.");
